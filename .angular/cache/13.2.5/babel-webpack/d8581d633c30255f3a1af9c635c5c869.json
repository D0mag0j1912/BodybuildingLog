{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./login.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./login.component.scss?ngResource\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TranslateService } from '@ngx-translate/core';\nimport { finalize } from 'rxjs/operators';\nimport { SNACK_BAR_DURATION } from '../../../constants/snack-bar-duration.const';\nimport { FormErrorStateMatcher } from '../../../helpers/error-matchers/form-error-state-matcher.helper';\nimport { AuthService } from '../../../services/auth/auth.service';\nimport { LoginService } from '../../../services/auth/login.service';\nimport * as AuthCustomValidators from '../../../validators/auth/auth.validators';\nlet LoginComponent = class LoginComponent {\n  constructor(translateService, loginService, authService, changeDetectorRef, snackBar) {\n    this.translateService = translateService;\n    this.loginService = loginService;\n    this.authService = authService;\n    this.changeDetectorRef = changeDetectorRef;\n    this.snackBar = snackBar;\n    this.isLoading = false;\n    this.formErrorStateMatcher = new FormErrorStateMatcher();\n    this.form = new FormGroup({\n      'email': new FormControl(null, [Validators.required, Validators.email]),\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6), Validators.maxLength(20)])\n    }, {\n      asyncValidators: AuthCustomValidators.passwordFitsEmail(this.loginService, this.changeDetectorRef)\n    });\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      var _a;\n\n      return ((_a = this.emailInput) === null || _a === void 0 ? void 0 : _a.nativeElement).focus();\n    });\n  }\n\n  onSubmit() {\n    if (!this.form.valid) {\n      this.snackBar.open(this.translateService.instant('auth.errors.invalid_form'), null, {\n        duration: SNACK_BAR_DURATION.ERROR,\n        panelClass: 'app__snackbar-error'\n      });\n      return;\n    }\n\n    this.isLoading = true;\n    this.authService.login(this.accessFormData('email').value, this.accessFormData('password').value).pipe(finalize(() => {\n      this.isLoading = false;\n      this.changeDetectorRef.markForCheck();\n    })).subscribe(response => {\n      if (response) {\n        this.snackBar.open(this.translateService.instant(response.Message), null, {\n          duration: SNACK_BAR_DURATION.GENERAL,\n          panelClass: response.Token ? 'app__snackbar' : 'app__snackbar-error'\n        });\n      }\n    });\n  }\n\n  accessFormData(formFieldName) {\n    return this.form.get(formFieldName);\n  }\n\n};\n\nLoginComponent.ctorParameters = () => [{\n  type: TranslateService\n}, {\n  type: LoginService\n}, {\n  type: AuthService\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSnackBar\n}];\n\nLoginComponent.propDecorators = {\n  emailInput: [{\n    type: ViewChild,\n    args: ['emailRef', {\n      read: ElementRef\n    }]\n  }]\n};\nLoginComponent = __decorate([Component({\n  selector: 'bl-login',\n  template: __NG_CLI_RESOURCE__0,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"sources":["C:/Development/trainingApk/src/app/views/auth/login/login.component.ts"],"names":["__decorate","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","ViewChild","FormControl","FormGroup","Validators","MatSnackBar","TranslateService","finalize","SNACK_BAR_DURATION","FormErrorStateMatcher","AuthService","LoginService","AuthCustomValidators","LoginComponent","constructor","translateService","loginService","authService","changeDetectorRef","snackBar","isLoading","formErrorStateMatcher","form","required","email","minLength","maxLength","asyncValidators","passwordFitsEmail","ngAfterViewInit","setTimeout","_a","emailInput","nativeElement","focus","onSubmit","valid","open","instant","duration","ERROR","panelClass","login","accessFormData","value","pipe","markForCheck","subscribe","response","Message","GENERAL","Token","formFieldName","get","ctorParameters","type","propDecorators","args","read","selector","template","changeDetection","OnPush","styles"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport __NG_CLI_RESOURCE__0 from \"./login.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./login.component.scss?ngResource\";\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { SNACK_BAR_DURATION } from '../../../constants/snack-bar-duration.const';\r\nimport { FormErrorStateMatcher } from '../../../helpers/error-matchers/form-error-state-matcher.helper';\r\nimport { AuthService } from '../../../services/auth/auth.service';\r\nimport { LoginService } from '../../../services/auth/login.service';\r\nimport * as AuthCustomValidators from '../../../validators/auth/auth.validators';\r\nlet LoginComponent = class LoginComponent {\r\n    constructor(translateService, loginService, authService, changeDetectorRef, snackBar) {\r\n        this.translateService = translateService;\r\n        this.loginService = loginService;\r\n        this.authService = authService;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.snackBar = snackBar;\r\n        this.isLoading = false;\r\n        this.formErrorStateMatcher = new FormErrorStateMatcher();\r\n        this.form = new FormGroup({\r\n            'email': new FormControl(null, [\r\n                Validators.required,\r\n                Validators.email,\r\n            ]),\r\n            'password': new FormControl(null, [\r\n                Validators.required,\r\n                Validators.minLength(6),\r\n                Validators.maxLength(20),\r\n            ]),\r\n        }, { asyncValidators: AuthCustomValidators.passwordFitsEmail(this.loginService, this.changeDetectorRef) });\r\n    }\r\n    ngAfterViewInit() {\r\n        setTimeout(() => { var _a; return ((_a = this.emailInput) === null || _a === void 0 ? void 0 : _a.nativeElement).focus(); });\r\n    }\r\n    onSubmit() {\r\n        if (!this.form.valid) {\r\n            this.snackBar.open(this.translateService.instant('auth.errors.invalid_form'), null, {\r\n                duration: SNACK_BAR_DURATION.ERROR,\r\n                panelClass: 'app__snackbar-error',\r\n            });\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        this.authService.login(this.accessFormData('email').value, this.accessFormData('password').value).pipe(finalize(() => {\r\n            this.isLoading = false;\r\n            this.changeDetectorRef.markForCheck();\r\n        })).subscribe((response) => {\r\n            if (response) {\r\n                this.snackBar.open(this.translateService.instant(response.Message), null, {\r\n                    duration: SNACK_BAR_DURATION.GENERAL,\r\n                    panelClass: response.Token ? 'app__snackbar' : 'app__snackbar-error',\r\n                });\r\n            }\r\n        });\r\n    }\r\n    accessFormData(formFieldName) {\r\n        return this.form.get(formFieldName);\r\n    }\r\n};\r\nLoginComponent.ctorParameters = () => [\r\n    { type: TranslateService },\r\n    { type: LoginService },\r\n    { type: AuthService },\r\n    { type: ChangeDetectorRef },\r\n    { type: MatSnackBar }\r\n];\r\nLoginComponent.propDecorators = {\r\n    emailInput: [{ type: ViewChild, args: ['emailRef', {\r\n                    read: ElementRef,\r\n                },] }]\r\n};\r\nLoginComponent = __decorate([\r\n    Component({\r\n        selector: 'bl-login',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        changeDetection: ChangeDetectionStrategy.OnPush,\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    })\r\n], LoginComponent);\r\nexport { LoginComponent };\r\n"]},"metadata":{},"sourceType":"module"}