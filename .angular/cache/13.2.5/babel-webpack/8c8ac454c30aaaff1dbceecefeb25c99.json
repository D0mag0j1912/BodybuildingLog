{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Development\\\\trainingApk\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { mergeMap, switchMap, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { LocalStorageItems } from '../../models/common/interfaces/common.model';\nlet AuthService = class AuthService {\n  constructor(http, router, translateService) {\n    this.http = http;\n    this.router = router;\n    this.translateService = translateService;\n    this.loggedUser$$ = new BehaviorSubject(null);\n    this.loggedUser$ = this.loggedUser$$.asObservable();\n    this.isAuth$$ = new BehaviorSubject(false);\n    this.isAuth$ = this.isAuth$$.asObservable();\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  updateUserData(preferences) {\n    //TODO: Ovdje treba pokupiti podatke iz Subjecta, a ne LS\n    const userData = JSON.parse(localStorage.getItem(LocalStorageItems.USER_DATA));\n    const updatedUserData = Object.assign(Object.assign({}, userData), {\n      Preferences: {\n        userId: preferences.userId,\n        language: preferences.language,\n        weightFormat: 'kg'\n      }\n    });\n    this.loggedUser$$.next(Object.assign({}, updatedUserData));\n    localStorage.setItem(LocalStorageItems.USER_DATA, JSON.stringify(Object.assign({}, updatedUserData)));\n  }\n\n  signup(language, weightFormat, email, password, confirmPassword) {\n    const signupData = {\n      email,\n      password,\n      confirmPassword\n    };\n    const preferences = {\n      language: language,\n      weightFormat: weightFormat\n    };\n    return this.http.post(environment.BACKEND + '/auth/signup', {\n      signupData: signupData,\n      preferences: preferences\n    });\n  }\n\n  login(email, password) {\n    var _this = this;\n\n    const authData = {\n      email: email,\n      password: password\n    };\n    return this.http.post(environment.BACKEND + '/auth/login', authData).pipe(tap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        if (response.Token) {\n          _this.loggedUser$$.next(response);\n\n          _this.isAuth$$.next(true);\n\n          _this.token = response.Token;\n          const expiresInDuration = response.ExpiresIn;\n\n          _this.setAuthTimer(expiresInDuration);\n\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n\n          _this.saveLS(_this.token, expirationDate, response._id, response.Preferences);\n\n          yield _this.router.navigate(['/training/new-training']);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()), mergeMap(response => this.translateService.use(response.Preferences.language).pipe(switchMap(_ => of(response)))));\n  }\n\n  autoLogin() {\n    if (JSON.parse(localStorage.getItem(LocalStorageItems.USER_DATA))) {\n      const userData = JSON.parse(localStorage.getItem(LocalStorageItems.USER_DATA));\n\n      if (!userData.Token || !userData.ExpirationDate) {\n        return;\n      }\n\n      const authData = {\n        Token: userData.Token,\n        ExpirationDate: new Date(userData.ExpirationDate),\n        _id: userData._id,\n        Preferences: userData.Preferences\n      };\n      const now = new Date();\n      const expiresIn = authData.ExpirationDate.getTime() - now.getTime();\n\n      if (expiresIn > 0) {\n        this.token = userData.Token;\n        this.setAuthTimer(expiresIn / 1000);\n        this.isAuth$$.next(true);\n        this.loggedUser$$.next(authData);\n      }\n    }\n  }\n\n  logout() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.token = null;\n\n      _this2.isAuth$$.next(false);\n\n      clearTimeout(_this2.tokenTimer);\n\n      _this2.clearLS();\n\n      yield _this2.router.navigate(['/auth/login']);\n    })();\n  }\n\n  setAuthTimer(duration) {\n    var _this3 = this;\n\n    this.tokenTimer = setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield _this3.logout();\n    }), duration * 1000);\n  }\n\n  saveLS(token, expirationDate, userId, preferences) {\n    const userData = {\n      Token: token,\n      ExpirationDate: expirationDate,\n      _id: userId,\n      Preferences: preferences\n    };\n    localStorage.setItem(LocalStorageItems.USER_DATA, JSON.stringify(userData));\n  }\n\n  clearLS() {\n    localStorage.removeItem(LocalStorageItems.USER_DATA);\n    localStorage.removeItem(LocalStorageItems.TRAINING_STATE);\n    localStorage.removeItem(LocalStorageItems.ALL_EXERCISES);\n  }\n\n};\n\nAuthService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: Router\n}, {\n  type: TranslateService\n}];\n\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"sources":["C:/Development/trainingApk/src/app/services/auth/auth.service.ts"],"names":["__decorate","HttpClient","Injectable","Router","TranslateService","BehaviorSubject","of","mergeMap","switchMap","tap","environment","LocalStorageItems","AuthService","constructor","http","router","translateService","loggedUser$$","loggedUser$","asObservable","isAuth$$","isAuth$","getToken","token","updateUserData","preferences","userData","JSON","parse","localStorage","getItem","USER_DATA","updatedUserData","Object","assign","Preferences","userId","language","weightFormat","next","setItem","stringify","signup","email","password","confirmPassword","signupData","post","BACKEND","login","authData","pipe","response","Token","expiresInDuration","ExpiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveLS","_id","navigate","use","_","autoLogin","ExpirationDate","expiresIn","logout","clearTimeout","tokenTimer","clearLS","duration","setTimeout","removeItem","TRAINING_STATE","ALL_EXERCISES","ctorParameters","type","providedIn"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BehaviorSubject, of } from 'rxjs';\r\nimport { mergeMap, switchMap, tap } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { LocalStorageItems } from '../../models/common/interfaces/common.model';\r\nlet AuthService = class AuthService {\r\n    constructor(http, router, translateService) {\r\n        this.http = http;\r\n        this.router = router;\r\n        this.translateService = translateService;\r\n        this.loggedUser$$ = new BehaviorSubject(null);\r\n        this.loggedUser$ = this.loggedUser$$.asObservable();\r\n        this.isAuth$$ = new BehaviorSubject(false);\r\n        this.isAuth$ = this.isAuth$$.asObservable();\r\n    }\r\n    getToken() {\r\n        return this.token;\r\n    }\r\n    updateUserData(preferences) {\r\n        //TODO: Ovdje treba pokupiti podatke iz Subjecta, a ne LS\r\n        const userData = JSON.parse(localStorage.getItem(LocalStorageItems.USER_DATA));\r\n        const updatedUserData = Object.assign(Object.assign({}, userData), { Preferences: {\r\n                userId: preferences.userId,\r\n                language: preferences.language,\r\n                weightFormat: 'kg',\r\n            } });\r\n        this.loggedUser$$.next(Object.assign({}, updatedUserData));\r\n        localStorage.setItem(LocalStorageItems.USER_DATA, JSON.stringify(Object.assign({}, updatedUserData)));\r\n    }\r\n    signup(language, weightFormat, email, password, confirmPassword) {\r\n        const signupData = {\r\n            email,\r\n            password,\r\n            confirmPassword,\r\n        };\r\n        const preferences = {\r\n            language: language,\r\n            weightFormat: weightFormat,\r\n        };\r\n        return this.http.post(environment.BACKEND + '/auth/signup', {\r\n            signupData: signupData,\r\n            preferences: preferences,\r\n        });\r\n    }\r\n    login(email, password) {\r\n        const authData = {\r\n            email: email,\r\n            password: password,\r\n        };\r\n        return this.http.post(environment.BACKEND + '/auth/login', authData).pipe(tap(async (response) => {\r\n            if (response.Token) {\r\n                this.loggedUser$$.next(response);\r\n                this.isAuth$$.next(true);\r\n                this.token = response.Token;\r\n                const expiresInDuration = response.ExpiresIn;\r\n                this.setAuthTimer(expiresInDuration);\r\n                const now = new Date();\r\n                const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\r\n                this.saveLS(this.token, expirationDate, response._id, response.Preferences);\r\n                await this.router.navigate(['/training/new-training']);\r\n            }\r\n        }), mergeMap((response) => this.translateService.use(response.Preferences.language).pipe(switchMap(_ => of(response)))));\r\n    }\r\n    autoLogin() {\r\n        if (JSON.parse(localStorage.getItem(LocalStorageItems.USER_DATA))) {\r\n            const userData = JSON.parse(localStorage.getItem(LocalStorageItems.USER_DATA));\r\n            if (!userData.Token || !userData.ExpirationDate) {\r\n                return;\r\n            }\r\n            const authData = {\r\n                Token: userData.Token,\r\n                ExpirationDate: new Date(userData.ExpirationDate),\r\n                _id: userData._id,\r\n                Preferences: userData.Preferences,\r\n            };\r\n            const now = new Date();\r\n            const expiresIn = authData.ExpirationDate.getTime() - now.getTime();\r\n            if (expiresIn > 0) {\r\n                this.token = userData.Token;\r\n                this.setAuthTimer(expiresIn / 1000);\r\n                this.isAuth$$.next(true);\r\n                this.loggedUser$$.next(authData);\r\n            }\r\n        }\r\n    }\r\n    async logout() {\r\n        this.token = null;\r\n        this.isAuth$$.next(false);\r\n        clearTimeout(this.tokenTimer);\r\n        this.clearLS();\r\n        await this.router.navigate(['/auth/login']);\r\n    }\r\n    setAuthTimer(duration) {\r\n        this.tokenTimer = setTimeout(async () => {\r\n            await this.logout();\r\n        }, duration * 1000);\r\n    }\r\n    saveLS(token, expirationDate, userId, preferences) {\r\n        const userData = {\r\n            Token: token,\r\n            ExpirationDate: expirationDate,\r\n            _id: userId,\r\n            Preferences: preferences,\r\n        };\r\n        localStorage.setItem(LocalStorageItems.USER_DATA, JSON.stringify(userData));\r\n    }\r\n    clearLS() {\r\n        localStorage.removeItem(LocalStorageItems.USER_DATA);\r\n        localStorage.removeItem(LocalStorageItems.TRAINING_STATE);\r\n        localStorage.removeItem(LocalStorageItems.ALL_EXERCISES);\r\n    }\r\n};\r\nAuthService.ctorParameters = () => [\r\n    { type: HttpClient },\r\n    { type: Router },\r\n    { type: TranslateService }\r\n];\r\nAuthService = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], AuthService);\r\nexport { AuthService };\r\n"]},"metadata":{},"sourceType":"module"}