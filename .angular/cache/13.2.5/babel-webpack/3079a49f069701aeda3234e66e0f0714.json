{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Development\\\\trainingApk\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./signup.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./signup.component.scss?ngResource\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_RADIO_DEFAULT_OPTIONS } from '@angular/material/radio';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { finalize } from 'rxjs/operators';\nimport { SNACK_BAR_DURATION } from '../../../constants/snack-bar-duration.const';\nimport { SPINNER_SIZE } from '../../../constants/spinner-size.const';\nimport { FormErrorStateMatcher } from '../../../helpers/error-matchers/form-error-state-matcher.helper';\nimport { AuthService } from '../../../services/auth/auth.service';\nimport { SignupService } from '../../../services/auth/signup.service';\nimport * as AuthCustomValidators from '../../../validators/auth/auth.validators';\nlet SignupComponent = class SignupComponent {\n  constructor(authService, signupService, translateService, changeDetectorRef, snackBar, router) {\n    this.authService = authService;\n    this.signupService = signupService;\n    this.translateService = translateService;\n    this.changeDetectorRef = changeDetectorRef;\n    this.snackBar = snackBar;\n    this.router = router;\n    this.formErrorStateMatcher = new FormErrorStateMatcher();\n    this.isLoading = false;\n    this.form = new FormGroup({\n      'language': new FormControl('en', [Validators.required]),\n      'weightFormat': new FormControl('kg', [Validators.required]),\n      'email': new FormControl(null, [Validators.required, Validators.email], [AuthCustomValidators.isEmailAvailable(this.signupService, this.changeDetectorRef)]),\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6), Validators.maxLength(20)]),\n      'confirmPassword': new FormControl(null, [Validators.required, Validators.minLength(6), Validators.maxLength(20)])\n    }, {\n      validators: AuthCustomValidators.samePasswords()\n    });\n  }\n\n  get spinnerSize() {\n    return SPINNER_SIZE;\n  }\n\n  onSubmit() {\n    var _this = this;\n\n    if (!this.form.valid) {\n      this.snackBar.open(this.translateService.instant('auth.errors.invalid_form'), null, {\n        duration: SNACK_BAR_DURATION.ERROR,\n        panelClass: 'app__snackbar-error'\n      });\n      return;\n    }\n\n    this.isLoading = true;\n    this.authService.signup(this.accessFormData('language').value, this.accessFormData('weightFormat').value, this.accessFormData('email').value, this.accessFormData('password').value, this.accessFormData('confirmPassword').value).pipe(finalize(() => {\n      this.isLoading = false;\n      this.changeDetectorRef.markForCheck();\n    })).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        if (response.Success) {\n          _this.snackBar.open(_this.translateService.instant(response.Message), null, {\n            duration: SNACK_BAR_DURATION.GENERAL,\n            panelClass: response.Success ? 'app__snackbar' : 'app__snackbar-error'\n          });\n\n          yield _this.router.navigate(['/auth/login']);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  accessFormData(formFieldName) {\n    return this.form.get(formFieldName);\n  }\n\n};\n\nSignupComponent.ctorParameters = () => [{\n  type: AuthService\n}, {\n  type: SignupService\n}, {\n  type: TranslateService\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSnackBar\n}, {\n  type: Router\n}];\n\nSignupComponent = __decorate([Component({\n  selector: 'bl-signup',\n  template: __NG_CLI_RESOURCE__0,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: MAT_RADIO_DEFAULT_OPTIONS,\n    useValue: {\n      color: 'primary'\n    }\n  }],\n  styles: [__NG_CLI_RESOURCE__1]\n})], SignupComponent);\nexport { SignupComponent };","map":{"version":3,"sources":["C:/Development/trainingApk/src/app/views/auth/signup/signup.component.ts"],"names":["__decorate","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","ChangeDetectionStrategy","ChangeDetectorRef","Component","FormControl","FormGroup","Validators","MAT_RADIO_DEFAULT_OPTIONS","MatSnackBar","Router","TranslateService","finalize","SNACK_BAR_DURATION","SPINNER_SIZE","FormErrorStateMatcher","AuthService","SignupService","AuthCustomValidators","SignupComponent","constructor","authService","signupService","translateService","changeDetectorRef","snackBar","router","formErrorStateMatcher","isLoading","form","required","email","isEmailAvailable","minLength","maxLength","validators","samePasswords","spinnerSize","onSubmit","valid","open","instant","duration","ERROR","panelClass","signup","accessFormData","value","pipe","markForCheck","subscribe","response","Success","Message","GENERAL","navigate","formFieldName","get","ctorParameters","type","selector","template","changeDetection","OnPush","providers","provide","useValue","color","styles"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport __NG_CLI_RESOURCE__0 from \"./signup.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./signup.component.scss?ngResource\";\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_RADIO_DEFAULT_OPTIONS } from '@angular/material/radio';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { SNACK_BAR_DURATION } from '../../../constants/snack-bar-duration.const';\r\nimport { SPINNER_SIZE } from '../../../constants/spinner-size.const';\r\nimport { FormErrorStateMatcher } from '../../../helpers/error-matchers/form-error-state-matcher.helper';\r\nimport { AuthService } from '../../../services/auth/auth.service';\r\nimport { SignupService } from '../../../services/auth/signup.service';\r\nimport * as AuthCustomValidators from '../../../validators/auth/auth.validators';\r\nlet SignupComponent = class SignupComponent {\r\n    constructor(authService, signupService, translateService, changeDetectorRef, snackBar, router) {\r\n        this.authService = authService;\r\n        this.signupService = signupService;\r\n        this.translateService = translateService;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.snackBar = snackBar;\r\n        this.router = router;\r\n        this.formErrorStateMatcher = new FormErrorStateMatcher();\r\n        this.isLoading = false;\r\n        this.form = new FormGroup({\r\n            'language': new FormControl('en', [Validators.required]),\r\n            'weightFormat': new FormControl('kg', [Validators.required]),\r\n            'email': new FormControl(null, [\r\n                Validators.required,\r\n                Validators.email\r\n            ], [AuthCustomValidators.isEmailAvailable(this.signupService, this.changeDetectorRef)]),\r\n            'password': new FormControl(null, [\r\n                Validators.required,\r\n                Validators.minLength(6),\r\n                Validators.maxLength(20)\r\n            ]),\r\n            'confirmPassword': new FormControl(null, [\r\n                Validators.required,\r\n                Validators.minLength(6),\r\n                Validators.maxLength(20)\r\n            ]),\r\n        }, { validators: AuthCustomValidators.samePasswords() });\r\n    }\r\n    get spinnerSize() {\r\n        return SPINNER_SIZE;\r\n    }\r\n    onSubmit() {\r\n        if (!this.form.valid) {\r\n            this.snackBar.open(this.translateService.instant('auth.errors.invalid_form'), null, {\r\n                duration: SNACK_BAR_DURATION.ERROR,\r\n                panelClass: 'app__snackbar-error',\r\n            });\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        this.authService.signup(this.accessFormData('language').value, this.accessFormData('weightFormat').value, this.accessFormData('email').value, this.accessFormData('password').value, this.accessFormData('confirmPassword').value).pipe(finalize(() => {\r\n            this.isLoading = false;\r\n            this.changeDetectorRef.markForCheck();\r\n        })).subscribe(async (response) => {\r\n            if (response.Success) {\r\n                this.snackBar.open(this.translateService.instant(response.Message), null, {\r\n                    duration: SNACK_BAR_DURATION.GENERAL,\r\n                    panelClass: response.Success ? 'app__snackbar' : 'app__snackbar-error',\r\n                });\r\n                await this.router.navigate(['/auth/login']);\r\n            }\r\n        });\r\n    }\r\n    accessFormData(formFieldName) {\r\n        return this.form.get(formFieldName);\r\n    }\r\n};\r\nSignupComponent.ctorParameters = () => [\r\n    { type: AuthService },\r\n    { type: SignupService },\r\n    { type: TranslateService },\r\n    { type: ChangeDetectorRef },\r\n    { type: MatSnackBar },\r\n    { type: Router }\r\n];\r\nSignupComponent = __decorate([\r\n    Component({\r\n        selector: 'bl-signup',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        changeDetection: ChangeDetectionStrategy.OnPush,\r\n        providers: [{\r\n                provide: MAT_RADIO_DEFAULT_OPTIONS,\r\n                useValue: {\r\n                    color: 'primary',\r\n                },\r\n            }],\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    })\r\n], SignupComponent);\r\nexport { SignupComponent };\r\n"]},"metadata":{},"sourceType":"module"}